AWSTemplateFormatVersion: '2010-09-09'

Description: "[EE] Gists Notifier"

Parameters:

  Destination:
    Type: String
    Description: |
      The destination to send notifications of new public gists to. If the destination
      is not an email address, alter the Protocol parameter to reflect the correct
      protocol to use for this destination.

  Username:
    Type: String
    Description: |
      The username to check and notify for new public gists.

  Protocol:
    Type: String
    Default: email
    Description: |
      The type of message being sent to the destination.
    AllowedValues:
      - email
      - sms

  Rate:
    Type: Number
    Default: 2
    MinValue: 2
    MaxValue: 120
    Description: |
      The interval in minutes, between checking for new public gists.

Metadata:

  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: "Basic Configuration"
        Parameters:
          - Destination
          - Username
      - Label:
          default: "Advanced Configuration"
        Parameters:
          - Rate
          - Protocol
    ParameterLabels:
      Username:
        default: "GitHub Username"
      Destination:
        default: "What is the Email or E.164 formatted Phone Number?"
      Rate:
        default: "How often (in minutes) should the Gist be checked?"

Conditions:

  IsEmailDestination: !Equals [ !Ref Protocol, "email" ]

Resources:

  DestinationTopic:
    Type: AWS::SNS::Topic
    Properties:
      Subscription:
        - Endpoint: !Ref Destination
          Protocol: !Ref Protocol

  IntervalFunction:
    Type: AWS::Lambda::Function
    Properties:
      Description: !Sub 'Checks for new public gists from "${Username}"'
      Runtime: nodejs6.10
      Timeout: 5
      Code:
        ZipFile: >
          const https = require('https');
          const AWS = require('aws-sdk');
          const URL = require('url');
          const { AWS_EXECUTION_ENV: aws } = process.env;

          const publish = (TopicArn, data) => {
            const Subject = `User "${data[0].owner.login}" has ${data.length} new Gists.`;
            const Body = `View the gists here: ${data[0].owner.url}/gists`;
            const Message = JSON.stringify({ default: Subject, email: Body });
            const params = { Message, Subject, TopicArn, MessageStructure: 'json' };
            return new AWS.SNS({ region: process.env.AWS_REGION }).publish(params).promise();
          };

          const send = ({ topicArn }, cb, raw) => {
            const data = JSON.parse(raw);
            const finish = () => cb(null, data);
            if (data.length === 0 || !aws) return finish();
            publish(topicArn, data).then(finish).catch(cb);
          };

          exports.handler = (event, ctx, cb) => {
            let body = '';
            const { url, interval, headers } = event;
            const { host, pathname } = URL.parse(url);
            const since = new Date(+new Date() - (1000 * 60 * interval)).toISOString();
            const req = https.get({ host, path: `${pathname}?since=${since}`, headers }, (res) => {
              res.setEncoding('utf8');
              res.on('data', (data) => { body += data; });
              res.on('end', () => send(event, cb, body));
            }).on('error', cb)
          };
      Handler: index.handler
      Role: !GetAtt IntervalFunctionExecutionRole.Arn
      DeadLetterConfig:
        TargetArn: !GetAtt IntervalFunctionDeadLetterQueue.Arn

  IntervalFunctionDeadLetterQueue:
    Type: AWS::SQS::Queue
    Properties:
      MessageRetentionPeriod: 172800

  IntervalFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${IntervalFunction}"
      RetentionInDays: 1

  IntervalFunctionErrorMetricGreaterThanZeroAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      ActionsEnabled: true
      AlarmDescription: IntervalFunction function invocation errors too high.
      TreatMissingData: notBreaching
      ComparisonOperator: GreaterThanThreshold
      Namespace: AWS/Lambda
      MetricName: Errors
      Statistic: Sum
      EvaluationPeriods: 1
      Period: 60
      Threshold: 1
      Unit: Count
      AlarmActions: !If
        - IsEmailDestination
        -
          - !Ref DestinationTopic
        - !Ref AWS::NoValue
      Dimensions:
        - Name: FunctionName
          Value: !Ref IntervalFunction

  IntervalFunctionDeadLetterCountMetricGreaterThanZeroAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      ActionsEnabled: true
      AlarmDescription: IntervalFunction function invocation errors too high.
      TreatMissingData: notBreaching
      ComparisonOperator: GreaterThanThreshold
      Namespace: AWS/SQS
      MetricName: NumberOfMessagesSent
      Statistic: Sum
      EvaluationPeriods: 1
      Period: 60
      Threshold: 1
      Unit: Count
      AlarmActions: !If
        - IsEmailDestination
        -
          - !Ref DestinationTopic
        - !Ref AWS::NoValue
      Dimensions:
        - Name: QueueName
          Value: !Ref IntervalFunctionDeadLetterQueue

  IntervalFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${IntervalFunction}"
      RetentionInDays: 1

  IntervalFunctionExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      Path: "/"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service: !Sub "lambda.${AWS::URLSuffix}"
            Action: sts:AssumeRole
      Policies:
        - PolicyName: InlineLambdaPermissions
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - sqs:SendMessage
                Resource:
                  - !GetAtt IntervalFunctionDeadLetterQueue.Arn

  IntervalFunctionExecutionPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: LambdaPermissions
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - sns:Publish
            Resource:
              - !Ref DestinationTopic
          - Effect: Allow
            Action:
              - logs:CreateLogStream
              - logs:PutLogEvents
            Resource:
              - '*'
      Roles:
        - !Ref IntervalFunctionExecutionRole

  Interval:
    Type: AWS::Events::Rule
    Properties:
      Description: !Sub 'Interval between checking for new public gists for "${Username}"'
      ScheduleExpression: !Sub "rate(${Rate} minutes)"
      State: ENABLED
      Targets:
        - Id: !Ref AWS::StackName
          Arn: !GetAtt IntervalFunction.Arn
          Input: !Sub |
            {
              "topicArn": "${DestinationTopic}",
              "url": "https://api.github.com/users/${Username}/gists",
              "interval": ${Rate},
              "headers": {
                "User-Agent": "${Username}"
              }
            }

  IntervalPermissionForEventsToInvokeLambda:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref IntervalFunction
      Action: "lambda:InvokeFunction"
      Principal: !Sub "events.${AWS::URLSuffix}"
      SourceArn: !GetAtt Interval.Arn
